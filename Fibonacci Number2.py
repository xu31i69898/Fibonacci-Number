# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dA24JM3Qd7PnsctLYRtx3ivuh_5a5Qbl
"""

import sys

# Pure recursive method to calculate Fibonacci number
def fib_recursive(n):
    if n <= 1:
        return n
    else:
        return fib_recursive(n-1) + fib_recursive(n-2)

# Dynamic programming method to calculate Fibonacci number
def fib_dynamic(n):
    fib_list = [0, 1]
    for i in range(2, n+1):
        fib_list.append(fib_list[i-1] + fib_list[i-2])
    return fib_list[n]

# Determine maximum n value that causes recursive method to crash
max_n = 0
while True:
    try:
        fib_recursive(max_n + 1)
        max_n += 1
    except sys.getrecursionlimit():
        break
print("Max n value for recursive method: ", max_n)

# Check if dynamic programming method can calculate F(n+1) for max_n+1
try:
    fib_dynamic(max_n+1)
    print("Dynamic programming method can compute F(n+1) for n =", max_n+1)
except:
    print("Dynamic programming method cannot compute F(n+1) for n =", max_n+1)